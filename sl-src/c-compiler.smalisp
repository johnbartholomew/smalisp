; quasiquote isn't defined natively, so we have to provide an implementation here
; (this implementation has been carefully written to not require anything other than
;  the functions provided by the core)
(let quasiquote (closure (a e)
   (let do-quasiquote (fn (v)
      (cond
         (eq (type v) 'cons)
            (cond
               (eq (car v) 'unquote) (eval (car (cdr v)) e)
               (cons (do-quasiquote (car v)) (do-quasiquote (cdr v))))
            v)))
	(do-quasiquote (car a))))

; first defun, just wraps (fn)
(let defun (macro (name plist expr)
  `(let ,name (fn ,plist ,expr))))

(defun cadr (l)
   (car (cdr l)))

(defun cddr (l)
   (cdr (cdr l)))

(defun caar (l)
   (car (car l)))

(defun caddr (l)
   (car (cdr (cdr l))))

(defun cadar (l)
   (car (cdr (car l))))

(defun cadddr (l)
   (car (cdr (cdr (cdr l)))))

(defun cadadr (l)
   (car (cdr (car (cdr l)))))

(let and (closure (args env)
   (cond
      (eval (car args) env)
         (cond
            (eval (cadr args) env) 't
            '())
      '())))

(defun null? (x)
   (eq x '()))

(defun cons? (v)
   (eq (type v) 'cons))

(defun symbol? (v)
   (eq (type v) 'symbol))

(let map-eval (fn (vals env)
   (cond
      (null? vals) '()
      (cons (eval (car vals) env)
         (map-eval (cdr vals) env)))))

(let init-param-list (fn (plist args env)
   (let first-name (car plist))
   (cond
      (eq first-name '&rest) (env-let (cadr plist) args env)
      (null? first-name) '()
      (do
         (env-let first-name (car args) env)
         (init-param-list (cdr plist) (cdr args) env)))))

; second defun, uses init-param-list, so you can define variadic functions
(let defun (macro (name plist expr)
  `(let ,name (closure (a e)
      (init-param-list ',plist (map-eval a e) (get-env)
      ,expr)))))

; first defmacro, uses init-param-list, so you can define variadic macros
(let defmacro (macro (name plist code)
  `(let ,name (closure (a e) (eval (do
      (init-param-list ',plist a (get-env))
      ,code) e)))))

; second defmacro uses &rest, so you can write macros with multiple statements
(defmacro defmacro (name plist &rest code)
  `(let ,name (closure (a e) (eval (do
     (init-param-list ',plist a (get-env))
     . ,code) e))))

; third defun, uses &rest, so you can write functions with multiple statements
(defmacro defun (name plist &rest code)
  `(let ,name (closure (a e)
      (init-param-list ',plist (map-eval a e) (get-env))
      . ,code)))

(let list-find (fn (lst val testfn)
   (cond
      (null? lst) '()
      (testfn (car lst) val) 't
      (list-find (cdr lst) val testfn))))

; fourth defun, does conditional expansion to create a function object if the param list doesn't contain &rest
(defmacro defun (name plist &rest code)
   (cond
      (list-find plist '&rest eq)
         `(let ,name (closure (a e)
            (init-param-list ',plist (map-eval a e) (get-env))
            . ,code))
      `(let ,name (fn ,plist . ,code))))

; third defmacro uses conditional compilation to create a macro object if the param list doesn't contain &rest
(defmacro defmacro (name plist &rest code)
   (cond
      (list-find plist '&rest eq)
         `(let ,name (closure (a e) (eval (do
            (init-param-list ',plist a (get-env))
            . ,code) e)))
      `(let ,name (macro ,plist . ,code))))

(defun append (seq-1 val)
   (cond
      (null? val) seq-1
      (null? seq-1) val
      (cons (car seq-1) (append (cdr seq-1) val))))

(defun concat (&rest lists)
   (defun do-concat (ls)
      (cond
         (null? ls) '()
         (append (car ls) (do-concat (cdr ls)))))
   (do-concat lists))

(defun mapcar (f ls)
   (cond
      (null? ls) '()
      (cons (f (car ls)) (mapcar f (cdr ls)))))

; -----------------------------------
; actual to-C compiler
; entry-function is (c-compile code c-name)
;
; the basic way the compiler works is taken straight from SICP (section 5.5)

(let seq-needs car)
(let seq-clobbers cadr)
(let seq-stmts caddr)

(defun seq-needs? (seq reg)
   (list-find (seq-needs seq) reg eq))

(defun seq-clobbers? (seq reg)
   (list-find (seq-clobbers seq) reg eq))

(defun preserving (regs seq-1 seq-2)
   (let saves)
   (let restores)

   (mapcar
      (fn (reg)
         (cond
            (and
               (seq-clobbers? seq-1 reg)
               (seq-needs? seq-2 reg))
               (do
                  (set saves (cons reg saves))
                  (set restores (cons reg restores)))))
      regs)

   (concat saves (seq-stmts seq-1) restores (seq-stmts seq-2)))

(defun make-inst-seq (needs clobbers stmts)
   (list needs clobbers stmts))

(defun empty-inst-seq ()
   '(() () ()))

(defun compile-linkage (linkage)
   (cond
      (eq linkage 'return)
         (make-inst-seq '(next) '()
            '((goto (reg next))))
      (eq linkage 'next)
         (empty-inst-seq)
      (make-inst-seq '() '()
         `(goto (label ,linkage)))))

(defun end-with-linkage (linkage inst-seq)
   (preserving '(continue)
      inst-seq
      (compile-linkage linkage)))

(defun compile-self-evaluating (expr target linkage)
   (end-with-linkage linkage
      (make-inst-seq '() (list target)
         `((assign ,target (const ,expr))))))

(defun compile-symbol (expr target linkage)
   (end-with-linkage linkage
      (make-inst-seq '(env) (list target)
         `((assign ,target (op env_lookup) (const ,expr) (reg env))))))

(defun compile (expr target linkage)
    (cond
        (symbol? expr) (compile-symbol expr target linkage)
        (compile-self-evaluating expr target linkage)))

(defun c-gen-goto (target)
   (write "\treturn ")
   (cond
      (eq (car target) 'reg)
         (do
            (write "get_")
            (princ (cadr target))
            (write "()"))
      (eq (car target) 'label)
         (do
            (write "&")
            (princ (cadr target))))
   (write ";\n"))

(defun c-gen-save (reg)
   (write "\tsave_")
   (princ reg)
   (write "(m);\n"))

(defun c-gen-restore (reg)
   (write "\trestore_")
   (princ reg)
   (write "(m);\n"))

(defun c-gen-op-arg (arg)
   (cond
      (eq (car arg) 'reg)
         (do
            (write "get_")
            (princ (cadr arg))
            (write "(m)"))
      (eq (car arg) 'const)
         (cond
            (eq (type (cadr arg)) 'symbol)
               (do
                  (write "make_symbol(\"")
                  (princ (cadr arg))
                  (write "\", 0)"))
            (eq (type (cadr arg)) 'integer)
               (do
                  (write "make_integer(")
                  (princ (cadr arg))
                  (write ")"))
            (write "nil()"))))

(defun c-gen-op-args (args)
   (cond
      (null? args) '()

      (null? (cdr args)) (c-gen-op-arg (car args))
      (do
         (c-gen-op-arg (car args))
         (write ", ")
         (c-gen-op-args (cdr args)))))

(defun c-gen-op (op args)
   (princ op)
   (write "(")
   (c-gen-op-args args)
   (write ")"))

(defun c-gen-assign (args)
   (let reg (car args))
   (write "\tset_")
   (princ reg)
   (write "(m, ")
   (c-gen-op (cadadr args) (cddr args))
   (write ");\n"))

(defun c-code-gen (instructions c-name)
   (write "void *autogen_")
   (write c-name)
   (write "(machine_t *m)\n{\n/* from instructions:\n\n")
   (mapcar
      (fn (x)
         (cond
            (eq (car x) 'goto) (c-gen-goto (cadr x))
            (eq (car x) 'assign) (c-gen-assign (cdr x))
            (eq (car x) 'save) (c-gen-save (cadr x))
            (eq (car x) 'restore) (c-gen-resote (cadr x))
            (do
               (write "Unknown instruction type:")
               (print x))))
      instructions)
   (write "\n*/\n}\n\n"))

; step-1 : do a cps-transform on the code
(defun c-compile (code c-name)
    (c-code-gen (compile code 'val 'return) c-name))

; -----------------------------------
; main:

(c-compile 'test-expr "slfe_quasiquote")

(exit)
